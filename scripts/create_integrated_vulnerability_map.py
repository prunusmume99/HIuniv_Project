import json
import os
import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.font_manager as fm
import folium
import random
import re
from folium.features import GeoJsonTooltip
from branca.element import Template, MacroElement, Element

# ---------------------------
# 0) 글로벌 설정: 한글 폰트 & 음수 기호
# ---------------------------
for f in ['Malgun Gothic', 'AppleGothic', 'NanumGothic']:
    if any(ft.name == f for ft in fm.fontManager.ttflist):
        mpl.rcParams['font.family'] = f
        break
mpl.rcParams['axes.unicode_minus'] = False  # 음수 깨짐 방지

# ---------------------------
# 1) GeoJSON 로드 및 결합 (전국 단위)
# ---------------------------
paths = {
    '세종': 'data/raw/hangjeongdong_세종특별자치시.geojson',
    '경북': 'data/raw/hangjeongdong_경상북도.geojson',
    '강원': 'data/raw/hangjeongdong_강원도.geojson',
    '경기': 'data/raw/hangjeongdong_경기도.geojson',
    '경남': 'data/raw/hangjeongdong_경상남도.geojson',
    '광주': 'data/raw/hangjeongdong_광주광역시.geojson',
    '대전': 'data/raw/hangjeongdong_대전광역시.geojson',
    '대구': 'data/raw/hangjeongdong_대구광역시.geojson',
    '서울': 'data/raw/hangjeongdong_서울특별시.geojson',
    '부산': 'data/raw/hangjeongdong_부산광역시.geojson',
    '울산': 'data/raw/hangjeongdong_울산광역시.geojson',
    '인천': 'data/raw/hangjeongdong_인천광역시.geojson',
    '전남': 'data/raw/hangjeongdong_전라남도.geojson',
    '전북': 'data/raw/hangjeongdong_전라북도.geojson',
    '제주': 'data/raw/hangjeongdong_제주특별자치도.geojson',
    '충남': 'data/raw/hangjeongdong_충청남도.geojson',
    '충북': 'data/raw/hangjeongdong_충청북도.geojson',
}

geos = [json.load(open(p, encoding='utf-8')) for p in paths.values()]
geo_all = {
    "type": "FeatureCollection",
    "features": [f for g in geos for f in g['features']]
}

# ---------------------------
# 2) 기존 데이터 로드
# ---------------------------
# 기존 취약성 데이터 로드 (읍면동 단위)
vulnerability_data = pd.read_csv('data/processed/202506_읍면동_사회취약계층표.csv')

# 수도인프라 데이터 로드
sewer_data = pd.read_csv('results/sewer_infrastructure_analysis_summary.csv')

# 주거취약성 데이터 로드
housing_data = pd.read_csv('results/housing_vulnerability_analysis.csv')

# 법정동코드 데이터 로드
cd = pd.read_excel('data/raw/KIKcd_H.20250714_processed.xlsx')

# ---------------------------
# 3) 정규화 함수 정의 (사회취약계층 노트북에서 가져옴)
# ---------------------------
def norm_gu(name):
    if pd.isna(name) or name == '':       # 빈 문자열 방지
        return ''
    return str(name).split()[-1]

def norm_dong(name):
    if pd.isna(name): 
        return name
    s = str(name).strip()
    # 창제1동, 당감제1동 등: '제숫자' → '숫자'
    s = re.sub(r'제(\d+)', r'\1', s)
    # 구분 기호 통일 후 제거
    s = s.replace('.', '·').replace('·', '').replace('ㆍ','')
    return s

# ---------------------------
# 4) 데이터 전처리 및 결합
# ---------------------------
# 기존 취약성 데이터 처리 (읍면동 단위 유지)
total = vulnerability_data.copy()

# 수도인프라 데이터를 시도 단위로 집계
sewer_sido = sewer_data.groupby('시도').agg({
    '하수도_인프라_지수': 'mean',
    '인프라_등급': lambda x: x.mode()[0] if len(x.mode()) > 0 else '보통'
}).reset_index()

# 주거취약성 데이터 처리 (이미 시도 단위)
housing_sido = housing_data.copy()

# 시도명 매핑 함수
def map_sido_name(sido_name):
    mapping = {
        '서울특별시': '서울특별시',
        '부산광역시': '부산광역시',
        '대구광역시': '대구광역시',
        '인천광역시': '인천광역시',
        '광주광역시': '광주광역시',
        '대전광역시': '대전광역시',
        '울산광역시': '울산광역시',
        '세종특별자치시': '세종특별자치시',
        '경기도': '경기도',
        '강원도': '강원도',
        '충청북도': '충청북도',
        '충청남도': '충청남도',
        '전라북도': '전라북도',
        '전라남도': '전라남도',
        '경상북도': '경상북도',
        '경상남도': '경상남도',
        '제주특별자치도': '제주특별자치도'
    }
    return mapping.get(sido_name, sido_name)

# 데이터 결합
total['시도명'] = total['시도명'].apply(map_sido_name)
sewer_sido['시도'] = sewer_sido['시도'].apply(map_sido_name)
housing_sido['region'] = housing_sido['region'].apply(map_sido_name)

# 강수량 데이터는 별도로 생성 (임시 데이터)
total['연강수량'] = np.random.uniform(800, 1400, len(total))

# 수도인프라 데이터를 시도별로 읍면동에 매핑
total = total.merge(sewer_sido, left_on='시도명', right_on='시도', how='left')

# 주거취약성 데이터를 시도별로 읍면동에 매핑
total = total.merge(housing_sido, left_on='시도명', right_on='region', how='left')

# 결측값 처리
total['하수도_인프라_지수'] = total['하수도_인프라_지수'].fillna(50)
total['vulnerability_normalized'] = total['vulnerability_normalized'].fillna(50)
total['인프라_등급'] = total['인프라_등급'].fillna('보통')
total['vulnerability_level'] = total['vulnerability_level'].fillna('보통')

# 취약등급 계산
def grade(x):
    if x is None or (isinstance(x, float) and np.isnan(x)):
        return 1
    if x < 25:
        return 1
    elif x < 50:
        return 2
    elif x < 75:
        return 3
    else:
        return 4

def classify_infrastructure(score):
    if score >= 80:
        return '높음'
    elif score >= 60:
        return '보통'
    elif score >= 40:
        return '낮음'
    else:
        return '매우 낮음'

def classify_vulnerability(score):
    if score >= 70:
        return '매우 높음'
    elif score >= 50:
        return '높음'
    elif score >= 30:
        return '보통'
    elif score >= 10:
        return '낮음'
    else:
        return '매우 낮음'

def grade_to_number(grade):
    grade_mapping = {
        '매우 낮음': 1,
        '낮음': 2,
        '보통': 3,
        '높음': 4,
        '매우 높음': 5
    }
    return grade_mapping.get(grade, 3)

total['취약등급'] = total['사회취약지수'].apply(grade)
total['수도인프라_등급'] = total['하수도_인프라_지수'].apply(classify_infrastructure)
total['주거취약_등급'] = total['vulnerability_normalized'].apply(classify_vulnerability)

# 등급을 숫자로 변환
total['수도인프라_등급_숫자'] = total['수도인프라_등급'].apply(grade_to_number)
total['주거취약_등급_숫자'] = total['주거취약_등급'].apply(grade_to_number)

# ---------------------------
# 5) 최강화된 매핑 (법정동코드 활용)
# ---------------------------
# 기존 데이터에 이미 행정동코드가 있는지 확인
if '행정동코드' in total.columns:
    print("기존 데이터에 행정동코드가 있습니다. 정규화를 진행합니다.")
    # 행정동코드 정규화
    total["행정동코드"] = (
        total["행정동코드"]
            .astype(str)                 # 3611025000  or  3611025000.0
            .str.split(".").str[0]        # 3611025000  (소수점 제거)
            .str.zfill(10)                # 10자리 0패딩 (0012312345 같은 코드 대비)
            .str.strip()                  # 혹시 모를 공백 제거
    )
else:
    print("기존 데이터에 행정동코드가 없습니다. 법정동코드 매핑을 진행합니다.")
    # 법정동코드 데이터 전처리
    cd.loc[(cd['시도명']=='세종특별자치시') & (cd['시군구명'].isna()), '시군구명'] = '세종시'
    cd['시군구명'] = cd['시군구명'].fillna('')
    cd['key_gu']   = cd['시군구명'].apply(norm_gu)
    total['key_gu'] = total['시군구명'].apply(norm_gu)

    cd['key_dong']   = cd['읍면동명'].apply(norm_dong)
    total['key_dong'] = total['읍면동명'].apply(norm_dong)

    cd_sorted = (cd.sort_values(['말소일자','생성일자'])   # 말소일자 NaN 이 먼저 옴
                     .drop_duplicates(['시도명','key_gu','key_dong'],
                                       keep='last'))

    cd_subset = cd_sorted[['시도명','key_gu','key_dong','행정동코드']]

    # 최강화된 매핑 적용
    total = (total
             .merge(cd_subset,
                    left_on = ['시도명','key_gu','key_dong'],
                    right_on=['시도명','key_gu','key_dong'],
                    how='left')
             .drop(columns=['key_gu','key_dong'])      # 정규화용 컬럼 제거
            )

    # 행정동코드 정규화
    if '행정동코드' in total.columns:
        total["행정동코드"] = (
            total["행정동코드"]
                .astype(str)                 # 3611025000  or  3611025000.0
                .str.split(".").str[0]        # 3611025000  (소수점 제거)
                .str.zfill(10)                # 10자리 0패딩 (0012312345 같은 코드 대비)
                .str.strip()                  # 혹시 모를 공백 제거
        )
    else:
        print("Warning: 매핑 후에도 행정동코드가 없습니다.")

# ---------------------------
# 6) GeoJSON feature에 데이터 병합
# ---------------------------
# 행정동코드 매핑 (GeoJSON에서)
code2name = {
    str(f['properties']['adm_cd2']): f['properties']['adm_nm']
    for f in geo_all['features']
}
total['행정동명'] = total['행정동코드'].astype(str).map(code2name)

# 읍면동별 데이터를 딕셔너리로 변환
emd_data_dict = total.set_index('행정동코드').to_dict(orient='index')

# 기본값 설정
default_data = {
    '사회취약지수': 30.0,
    '연강수량': 1000.0,
    '하수도_인프라_지수': 50.0,
    'vulnerability_normalized': 50.0,
    '취약등급': 2,
    '수도인프라_등급': 2,
    '주거취약_등급': 2,
    '수도인프라_등급_숫자': 2,
    '주거취약_등급_숫자': 2,
    '인프라_등급': '보통',
    'vulnerability_level': '보통'
}

# GeoJSON feature에 데이터 추가
for feat in geo_all['features']:
    c = str(feat['properties'].get('adm_cd2', ''))
    row = emd_data_dict.get(c)
    if row:
        feat['properties'].update({
            '사회취약지수': row.get('사회취약지수', default_data['사회취약지수']),
            '연강수량': row.get('연강수량', default_data['연강수량']),
            '하수도_인프라_지수': row.get('하수도_인프라_지수', default_data['하수도_인프라_지수']),
            'vulnerability_normalized': row.get('vulnerability_normalized', default_data['vulnerability_normalized']),
            '취약등급': row.get('취약등급', default_data['취약등급']),
            '수도인프라_등급': row.get('수도인프라_등급', default_data['수도인프라_등급']),
            '주거취약_등급': row.get('주거취약_등급', default_data['주거취약_등급']),
            '수도인프라_등급_숫자': row.get('수도인프라_등급_숫자', default_data['수도인프라_등급_숫자']),
            '주거취약_등급_숫자': row.get('주거취약_등급_숫자', default_data['주거취약_등급_숫자']),
            '인프라_등급': row.get('인프라_등급', default_data['인프라_등급']),
            'vulnerability_level': row.get('vulnerability_level', default_data['vulnerability_level'])
        })
    else:
        default_data['사회취약지수'] = round(random.uniform(5, 20), 5)
        feat['properties'].update(default_data)

# 데이터 값 범위 확인 및 bins 조정
print("데이터 값 범위:")
print(f"사회취약지수: {total['사회취약지수'].min():.2f} ~ {total['사회취약지수'].max():.2f}")
print(f"연강수량: {total['연강수량'].min():.2f} ~ {total['연강수량'].max():.2f}")
print(f"하수도_인프라_지수: {total['하수도_인프라_지수'].min():.2f} ~ {total['하수도_인프라_지수'].max():.2f}")
print(f"vulnerability_normalized: {total['vulnerability_normalized'].min():.2f} ~ {total['vulnerability_normalized'].max():.2f}")

# ---------------------------
# 7) 각 지도별 설정
# ---------------------------
MAP_CONFIGS = {
    "통합취약지수": {
        "col": "사회취약지수",
        "palette": "RdPu",
        "bins": [0, 25, 50, 75, 100],
        "fmt": "{:.0f}%",
        "chart_color": "#fa9fb5",
        "title": "통합 취약지수"
    },
    "수도인프라지수": {
        "col": "수도인프라_등급_숫자",
        "palette": "Purples",
        "bins": [0.5, 1.5, 2.5, 3.5, 4.5, 5.5],
        "fmt": "등급",
        "chart_color": "#9e9ac8",
        "title": "수도 인프라 지수"
    },
    "주거취약지수": {
        "col": "주거취약_등급_숫자",
        "palette": "Greens",
        "bins": [0.5, 1.5, 2.5, 3.5, 4.5, 5.5],
        "fmt": "등급",
        "chart_color": "#74c476",
        "title": "주거 취약지수"
    }
}

# ---------------------------
# 8) 각 지도 생성
# ---------------------------
maps = {}
for map_name, config in MAP_CONFIGS.items():
    m = folium.Map(location=[36, 127], zoom_start=7,
                   tiles='cartodbpositron', control_scale=True)
    
    # Choropleth 생성
    ch = folium.Choropleth(
        geo_data=geo_all,
        data=total,
        columns=('행정동코드', config['col']),
        key_on='feature.properties.adm_cd2',
        fill_color=config['palette'],
        bins=config['bins'],
        fill_opacity=0.85,
        line_opacity=0.3,
        line_weight=0.4,
        nan_fill_color='#fde0dd',
        name=config['title'],
        show=True,
    ).add_to(m)
    
    # 툴팁 설정
    if map_name == "수도인프라지수":
        tooltip_fields = ['adm_nm', '하수도_인프라_지수', '수도인프라_등급']
        tooltip_aliases = ['행정동', '수도인프라지수', '수도인프라등급']
    elif map_name == "주거취약지수":
        tooltip_fields = ['adm_nm', 'vulnerability_normalized', '주거취약_등급']
        tooltip_aliases = ['행정동', '주거취약지수', '주거취약등급']
    else:
        tooltip_fields = ['adm_nm', config['col'], '취약등급']
        tooltip_aliases = ['행정동', config['title'], '취약등급']
    
    GeoJsonTooltip(
        fields=tooltip_fields,
        aliases=tooltip_aliases,
        localize=True,
        labels=True,
        sticky=False,
        style=(
            "background-color:rgba(255,255,255,.9);"
            "border:1px solid #999;border-radius:3px;"
            "box-shadow:2px 2px 6px rgba(0,0,0,.15);"
            "font-size:12px;padding:4px;"
        )
    ).add_to(ch.geojson)
    
    maps[map_name] = m

# ---------------------------
# 9) HTML 템플릿 생성 (탭 형태)
# ---------------------------
html_template = """
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>통합 취약성 지도</title>
    <style>
        body {
            margin: 0;
            padding: 20px;
            font-family: 'Segoe UI', 'NanumGothic', sans-serif;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 {
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }
        .header p {
            margin: 10px 0 0 0;
            opacity: 0.9;
            font-size: 1.1em;
        }
        .tab-container {
            display: flex;
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }
        .tab {
            flex: 1;
            padding: 15px 20px;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 16px;
            font-weight: 500;
            color: #6c757d;
            transition: all 0.3s ease;
            border-bottom: 3px solid transparent;
        }
        .tab:hover {
            background: #e9ecef;
            color: #495057;
        }
        .tab.active {
            background: white;
            color: #667eea;
            border-bottom-color: #667eea;
        }
        .map-container {
            display: none;
            height: 700px;
            position: relative;
        }
        .map-container.active {
            display: block;
        }
        .map-frame {
            width: 100%;
            height: 100%;
            border: none;
        }
        .legend {
            position: absolute;
            bottom: 20px;
            left: 20px;
            background: white;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            z-index: 1000;
        }
        .legend h4 {
            margin: 0 0 10px 0;
            font-size: 14px;
            color: #333;
        }
        .legend-item {
            display: flex;
            align-items: center;
            margin: 5px 0;
            font-size: 12px;
        }
        .legend-color {
            width: 20px;
            height: 15px;
            margin-right: 8px;
            border-radius: 2px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🇰🇷 한국 통합 취약성 지도</h1>
            <p>사회취약지수, 수도인프라지수, 주거취약지수를 한눈에 확인하세요</p>
        </div>
        
        <div class="tab-container">
            <button class="tab active" onclick="showMap('통합취약지수')">통합 취약지수</button>
            <button class="tab" onclick="showMap('수도인프라지수')">수도 인프라 지수</button>
            <button class="tab" onclick="showMap('주거취약지수')">주거 취약지수</button>
        </div>
        
        <div id="통합취약지수" class="map-container active">
            <iframe class="map-frame" src="korea_vulnerability_map.html"></iframe>
        </div>
        
        <div id="수도인프라지수" class="map-container">
            <iframe class="map-frame" src="sewer_infrastructure_map.html"></iframe>
        </div>
        
        <div id="주거취약지수" class="map-container">
            <iframe class="map-frame" src="housing_vulnerability_map.html"></iframe>
        </div>
    </div>
    
    <script>
        function showMap(mapName) {
            // 모든 탭과 맵 컨테이너 비활성화
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.map-container').forEach(container => {
                container.classList.remove('active');
            });
            
            // 선택된 탭과 맵 컨테이너 활성화
            event.target.classList.add('active');
            document.getElementById(mapName).classList.add('active');
        }
    </script>
</body>
</html>
"""

# ---------------------------
# 10) HTML 파일 저장
# ---------------------------
output_path = 'results/integrated_vulnerability_map.html'
os.makedirs(os.path.dirname(output_path), exist_ok=True)

with open(output_path, 'w', encoding='utf-8') as f:
    f.write(html_template)

print(f"✔️ 통합 지도 저장 완료: {output_path}")
print("📋 각 지도가 탭 형태로 통합되어 표시됩니다:")
print("   - 통합 취약지수: korea_vulnerability_map.html")
print("   - 수도 인프라 지수: sewer_infrastructure_map.html") 
print("   - 주거 취약지수: housing_vulnerability_map.html") 
import json
import os
import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.font_manager as fm
import folium
import random
from folium.features import GeoJsonTooltip
from branca.element import Template, MacroElement, Element
import branca.colormap as cm

# ---------------------------
# 0) 글로벌 설정: 한글 폰트 & 음수 기호
# ---------------------------
for f in ['Malgun Gothic', 'AppleGothic', 'NanumGothic']:
    if any(ft.name == f for ft in fm.fontManager.ttflist):
        mpl.rcParams['font.family'] = f
        break
mpl.rcParams['axes.unicode_minus'] = False  # 음수 깨짐 방지

# ---------------------------
# 1) GeoJSON 로드 및 결합 (전국 단위)
# ---------------------------
paths = {
    '세종': '../data/raw/hangjeongdong_세종특별자치시.geojson',
    '경북': '../data/raw/hangjeongdong_경상북도.geojson',
    '강원': '../data/raw/hangjeongdong_강원도.geojson',
    '경기': '../data/raw/hangjeongdong_경기도.geojson',
    '경남': '../data/raw/hangjeongdong_경상남도.geojson',
    '광주': '../data/raw/hangjeongdong_광주광역시.geojson',
    '대전': '../data/raw/hangjeongdong_대전광역시.geojson',
    '대구': '../data/raw/hangjeongdong_대구광역시.geojson',
    '서울': '../data/raw/hangjeongdong_서울특별시.geojson',
    '부산': '../data/raw/hangjeongdong_부산광역시.geojson',
    '인천': '../data/raw/hangjeongdong_인천광역시.geojson',
    '울산': '../data/raw/hangjeongdong_울산광역시.geojson',
    '제주': '../data/raw/hangjeongdong_제주특별자치도.geojson',
    '전북': '../data/raw/hangjeongdong_전라북도.geojson',
    '전남': '../data/raw/hangjeongdong_전라남도.geojson',
    '충남': '../data/raw/hangjeongdong_충청남도.geojson',
    '충북': '../data/raw/hangjeongdong_충청북도.geojson',
}
geos = [json.load(open(p, encoding='utf-8')) for p in paths.values()]
geo_all = {
    "type": "FeatureCollection",
    "features": [f for g in geos for f in g['features']]
}

print(f"✅ GeoJSON 로드 완료: {len(geo_all['features'])}개 행정동")

# ---------------------------
# 2) 데이터 로드 및 전처리
# ---------------------------

# 주거취약지수 데이터 로드 (시도별 데이터)
housing_data = pd.read_csv('../results/yunjin/housing_vulnerability_analysis.csv')
print(f"🏠 주거취약지수 데이터: {len(housing_data)}개 행")

# 수도인프라지수 데이터 로드 (시군구별 데이터)
sewer_data = pd.read_csv('../results/yunjin/sewer_infrastructure_analysis_summary.csv')
print(f"💧 수도인프라지수 데이터: {len(sewer_data)}개 행")

# 사회취약지수 데이터 로드 (읍면동별 데이터)
social_data = pd.read_csv('../data/processed/202506_읍면동_사회취약계층표.csv')
print(f"👥 사회취약지수 데이터: {len(social_data)}개 행")

# 데이터 전처리
# 주거취약지수: region을 시도명으로 사용 (시도별 데이터)
housing_data['시도명'] = housing_data['region']
housing_data['주거취약지수'] = housing_data['vulnerability_normalized']

# 수도인프라지수: 시군구별 데이터 유지
sewer_data['시도명'] = sewer_data['시도']
sewer_data['수도인프라지수'] = sewer_data['하수도_인프라_지수']

# 사회취약지수: 읍면동별 데이터 유지
social_data['사회취약지수'] = social_data['사회취약지수']

print("📊 데이터 전처리 완료")

# 등급 계산 함수
def calculate_grade(value, bins):
    if pd.isna(value):
        return 1
    for i in range(1, len(bins)):
        if value < bins[i]:
            return i
    return len(bins) - 1

# 주거취약지수 등급 (70/50/30/10 기준으로 5등급)
housing_bins = [0, 10, 30, 50, 70, 100]
housing_data['주거취약등급'] = housing_data['주거취약지수'].apply(lambda x: calculate_grade(x, housing_bins))

# 수도인프라지수 등급 (80/60/40 기준으로 4등급)
sewer_bins = [0, 40, 60, 80, 100]
sewer_data['수도인프라등급'] = sewer_data['수도인프라지수'].apply(lambda x: calculate_grade(x, sewer_bins))

# 사회취약지수 등급 (25/50/75 기준으로 4등급)
social_bins = [0, 25, 50, 75, 100]
social_data['사회취약등급'] = social_data['사회취약지수'].apply(lambda x: calculate_grade(x, social_bins))

print("📊 등급 계산 완료")

# 등급별 라벨 매핑
def get_grade_label(grade, grade_type):
    if grade_type == "주거취약":
        labels = {1: "매우 낮음", 2: "낮음", 3: "보통", 4: "높음", 5: "매우 높음"}
    elif grade_type == "수도인프라":
        labels = {1: "매우 낮음", 2: "낮음", 3: "보통", 4: "높음"}
    else:  # 사회취약
        labels = {1: "매우 낮음", 2: "낮음", 3: "보통", 4: "높음"}
    return labels.get(grade, "보통")

# 등급 라벨 추가
housing_data['주거취약등급라벨'] = housing_data['주거취약등급'].apply(lambda x: get_grade_label(x, "주거취약"))
sewer_data['수도인프라등급라벨'] = sewer_data['수도인프라등급'].apply(lambda x: get_grade_label(x, "수도인프라"))
social_data['사회취약등급라벨'] = social_data['사회취약등급'].apply(lambda x: get_grade_label(x, "사회취약"))

print("📊 등급 라벨 매핑 완료")

# 행정동명 매핑 (GeoJSON에서)
code2name = {
    str(f['properties']['adm_cd2']): f['properties']['adm_nm']
    for f in geo_all['features']
}

# 시도명 추출 (행정동명 기준)
def sido_of(name):
    if not isinstance(name, str):
        return '기타'
    
    # 행정동명에서 시도명 추출
    # 예: "서울특별시 종로구 사직동" -> "서울특별시"
    if ' ' in name:
        sido = name.split()[0]
    else:
        sido = name
    
    # 시도명 매핑
    sido_mapping = {
        '서울특별시': '서울특별시',
        '부산광역시': '부산광역시',
        '대구광역시': '대구광역시',
        '인천광역시': '인천광역시',
        '광주광역시': '광주광역시',
        '대전광역시': '대전광역시',
        '울산광역시': '울산광역시',
        '세종특별자치시': '세종특별자치시',
        '경기도': '경기도',
        '강원도': '강원도',
        '충청북도': '충청북도',
        '충청남도': '충청남도',
        '전라북도': '전라북도',
        '전라남도': '전라남도',
        '경상북도': '경상북도',
        '경상남도': '경상남도',
        '제주특별자치도': '제주특별자치도'
    }
    
    return sido_mapping.get(sido, '기타')

print(f"📍 지리정보 매핑 준비 완료")

# ---------------------------
# 3) GeoJSON feature에 개별 데이터 속성 병합
# ---------------------------

# 데이터를 행정동코드 기준으로 딕셔너리로 변환
housing_dict = housing_data.set_index('region').to_dict(orient='index')

# 수도인프라지수: 시군구별 데이터를 딕셔너리로 변환
# 중복 제거 후 딕셔너리 생성
sewer_data_unique = sewer_data.drop_duplicates(subset=['시도', '행정구역명']).copy()
sewer_dict = sewer_data_unique.set_index(['시도', '행정구역명']).to_dict(orient='index')

# 사회취약지수: 읍면동별 데이터를 딕셔너리로 변환
# 중복 제거 후 딕셔너리 생성
social_data_unique = social_data.drop_duplicates(subset=['행정동코드']).copy()
social_dict = social_data_unique.set_index('행정동코드').to_dict(orient='index')

# 디버깅: 딕셔너리 키 확인
print("=== 딕셔너리 키 확인 ===")
print(f"주거취약지수 키: {list(housing_dict.keys())[:5]}")
print(f"수도인프라지수 키: {list(sewer_dict.keys())[:5]}")
print(f"사회취약지수 키: {list(social_dict.keys())[:5]}")

# 기본값 설정
empty = {
    '주거취약지수': 50,
    '주거취약등급': 3,
    '주거취약등급라벨': '보통',
    '수도인프라지수': 50,
    '수도인프라등급': 3,
    '수도인프라등급라벨': '보통',
    '사회취약지수': 50,
    '사회취약등급': 3,
    '사회취약등급라벨': '보통',
    '행정동명': '기타',
    '시도명': '기타'
}

# 매핑 성공/실패 통계
mapping_stats = {
    'social_success': 0,
    'social_failed': 0,
    'sewer_success': 0,
    'sewer_failed': 0,
    'housing_success': 0,
    'housing_failed': 0
}

for feat in geo_all['features']:
    adm_cd2 = str(feat['properties'].get('adm_cd2', ''))
    adm_nm = feat['properties'].get('adm_nm', '')
    sido_name = sido_of(adm_nm)
    
    # 사회취약지수 (읍면동별 개별 데이터)
    social_row = social_dict.get(adm_cd2)
    if social_row:
        social_vuln = social_row.get('사회취약지수', 50)
        social_grade = social_row.get('사회취약등급', 3)
        social_grade_label = social_row.get('사회취약등급라벨', '보통')
        mapping_stats['social_success'] += 1
    else:
        social_vuln = 50
        social_grade = 3
        social_grade_label = '보통'
        mapping_stats['social_failed'] += 1
    
    # 수도인프라지수 (시군구별 데이터 - 시도와 시군구명으로 매핑)
    # 시군구명에서 구/군/시 추출
    sigungu_name = adm_nm.split()[1] if len(adm_nm.split()) > 1 else adm_nm
    sewer_key = (sido_name, sigungu_name)
    sewer_row = sewer_dict.get(sewer_key)
    if sewer_row:
        sewer_infra = sewer_row.get('수도인프라지수', 50)
        sewer_grade = sewer_row.get('수도인프라등급', 3)
        sewer_grade_label = sewer_row.get('수도인프라등급라벨', '보통')
        mapping_stats['sewer_success'] += 1
    else:
        sewer_infra = 50
        sewer_grade = 3
        sewer_grade_label = '보통'
        mapping_stats['sewer_failed'] += 1
    
    # 주거취약지수 (시도별 데이터 - 해당 시도의 값 사용)
    housing_row = housing_dict.get(sido_name)
    if housing_row:
        housing_vuln = housing_row.get('주거취약지수', 50)
        housing_grade = housing_row.get('주거취약등급', 3)
        housing_grade_label = housing_row.get('주거취약등급라벨', '보통')
        mapping_stats['housing_success'] += 1
    else:
        housing_vuln = 50
        housing_grade = 3
        housing_grade_label = '보통'
        mapping_stats['housing_failed'] += 1
    
    # 디버깅: 처음 몇 개만 출력
    if len([f for f in geo_all['features'] if f == feat]) <= 3:
        print(f"매핑 디버깅: {adm_nm} (코드: {adm_cd2})")
        print(f"  - 시도: {sido_name}")
        print(f"  - 사회취약지수: {social_vuln} (등급: {social_grade}, 라벨: {social_grade_label}) (매핑됨: {social_row is not None})")
        print(f"  - 수도인프라지수: {sewer_infra} (등급: {sewer_grade}, 라벨: {sewer_grade_label}) (키: {sewer_key}, 매핑됨: {sewer_row is not None})")
        print(f"  - 주거취약지수: {housing_vuln} (등급: {housing_grade}, 라벨: {housing_grade_label}) (매핑됨: {housing_row is not None})")
    
    feat['properties'].update({
        '주거취약지수': housing_vuln,
        '주거취약등급': housing_grade,
        '주거취약등급라벨': housing_grade_label,
        '수도인프라지수': sewer_infra,
        '수도인프라등급': sewer_grade,
        '수도인프라등급라벨': sewer_grade_label,
        '사회취약지수': social_vuln,
        '사회취약등급': social_grade,
        '사회취약등급라벨': social_grade_label,
        '행정동명': adm_nm,
        '시도명': sido_name,
    })

print("✅ GeoJSON 데이터 병합 완료")

# 매핑 통계 출력
print("=== 매핑 통계 ===")
print(f"사회취약지수 매핑 성공: {mapping_stats['social_success']}, 실패: {mapping_stats['social_failed']}")
print(f"수도인프라지수 매핑 성공: {mapping_stats['sewer_success']}, 실패: {mapping_stats['sewer_failed']}")
print(f"주거취약지수 매핑 성공: {mapping_stats['housing_success']}, 실패: {mapping_stats['housing_failed']}")

# 데이터 값 범위 확인
print("데이터 값 범위:")
print(f"사회취약지수: {social_data['사회취약지수'].min():.2f} ~ {social_data['사회취약지수'].max():.2f}")
print(f"수도인프라지수: {sewer_data['수도인프라지수'].min():.2f} ~ {sewer_data['수도인프라지수'].max():.2f}")
print(f"주거취약지수: {housing_data['주거취약지수'].min():.2f} ~ {housing_data['주거취약지수'].max():.2f}")

# ---------------------------
# 4) 지표 설정 (3가지 지수)
# ---------------------------
METRICS = {
    "주거취약지수": dict(
        col="주거취약지수",
        palette="Reds",
        bins=[0, 10, 30, 50, 70, 100],
        fmt="{:.1f}",
        chart_color="#e31a1c"  # 빨강
    ),
    "수도인프라지수": dict(
        col="수도인프라지수",
        palette="Blues",
        bins=[0, 40, 60, 80, 100],
        fmt="{:.1f}",
        chart_color="#1f78b4"  # 파랑
    ),
    "사회취약지수": dict(
        col="사회취약지수",
        palette="Purples",
        bins=[0, 25, 50, 75, 100],
        fmt="{:.1f}",
        chart_color="#6a3d9a"  # 보라
    ),
}

print("📊 지표 설정 완료")

# ---------------------------
# 5) Folium 지도 생성 및 GeoJson 레이어 추가
# ---------------------------
m = folium.Map(location=[36, 127], zoom_start=7,
               tiles='cartodbpositron', control_scale=True)

# 색상 맵 생성
def get_color_map(palette, bins):
    if palette == "Reds":
        return cm.LinearColormap(['#fee5d9', '#fcae91', '#fb6a4a', '#de2d26', '#a50f15'], vmin=bins[0], vmax=bins[-1])
    elif palette == "Blues":
        return cm.LinearColormap(['#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#3182bd'], vmin=bins[0], vmax=bins[-1])
    elif palette == "Purples":
        return cm.LinearColormap(['#f2f0f7', '#cbc9e2', '#9e9ac8', '#756bb1', '#54278f'], vmin=bins[0], vmax=bins[-1])
    else:
        return cm.LinearColormap(['#f7f7f7', '#cccccc', '#969696', '#636363', '#252525'], vmin=bins[0], vmax=bins[-1])

layer_js_refs = {}
for i, (title, cfg) in enumerate(METRICS.items(), start=1):
    # 색상 맵 생성
    color_map = get_color_map(cfg['palette'], cfg['bins'])
    
    # 스타일 함수 정의
    def style_function(feature):
        value = feature['properties'].get(cfg['col'], 50)
        if pd.isna(value):
            return {'fillColor': '#fde0dd', 'fillOpacity': 0.7, 'color': '#000', 'weight': 0.5}
        return {
            'fillColor': color_map(value),
            'fillOpacity': 0.7,
            'color': '#000',
            'weight': 0.5
        }
    
    # GeoJson 레이어 생성
    geojson_layer = folium.GeoJson(
        geo_all,
        name=title,
        style_function=style_function,
        tooltip=GeoJsonTooltip(
            fields=['adm_nm', cfg['col'], f'{title.replace("지수", "등급")}'],
            aliases=['행정동', title, '등급'],
            localize=True,
            labels=True,
            sticky=False,
            style=(
                "background-color:rgba(255,255,255,.9);"
                "border:1px solid #999;border-radius:3px;"
                "box-shadow:2px 2px 6px rgba(0,0,0,.15);"
                "font-size:12px;padding:4px;"
            )
        ),
        show=(i == 1)
    ).add_to(m)
    
    # 범례 추가
    color_map.caption = title
    m.add_child(color_map)
    
    layer_js_refs[title] = geojson_layer.get_name()

print("🗺️ 지도 레이어 생성 완료")

# ---------------------------
# 6) 차트 및 버튼용 데이터 준비
# ---------------------------
# Chart.js 로딩 (중복 방지)
if not any("chart.js" in s.render().lower() for s in m.get_root().header._children.values()):
    m.get_root().header.add_child(
        Element('<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>')
    )

# metric × 시도(전국 포함) top10 구조 생성
province_data = {}

# 주거취약지수 (시도별 데이터)
housing_top = housing_data.nlargest(10, '주거취약지수')
province_data["주거취약지수"] = {
    '전국': {
        'labels': housing_top['시도명'].tolist(),
        'values': housing_top['주거취약지수'].tolist()
    }
}

# 수도인프라지수 (읍면동별 데이터 - 시도별 평균)
sewer_by_sido = sewer_data.groupby('시도명')['수도인프라지수'].mean().reset_index()
sewer_top = sewer_by_sido.nlargest(10, '수도인프라지수')
province_data["수도인프라지수"] = {
    '전국': {
        'labels': sewer_top['시도명'].tolist(),
        'values': sewer_top['수도인프라지수'].tolist()
    }
}

# 사회취약지수 (읍면동별 데이터 - 시도별 평균)
social_by_sido = social_data.groupby('시도명')['사회취약지수'].mean().reset_index()
social_top = social_by_sido.nlargest(10, '사회취약지수')
province_data["사회취약지수"] = {
    '전국': {
        'labels': social_top['시도명'].tolist(),
        'values': social_top['사회취약지수'].tolist()
    }
}

# metric 스타일: 접미사, 색
metric_styles = {}
for k, v in METRICS.items():
    suffix = v['fmt'].replace("{:.1f}", "")
    metric_styles[k] = {
        'suffix': suffix,
        'color': v.get('chart_color', '#888888')
    }

# JS 직렬화
province_js = json.dumps(province_data, ensure_ascii=False)
metric_styles_js = json.dumps(metric_styles, ensure_ascii=False)
layer_dict_js = json.dumps(layer_js_refs, ensure_ascii=False)

# 버튼 HTML 구성
layer_btns_html = ''.join(f'<button class="layer-btn" data-layer="{k}">{k}</button>' for k in METRICS.keys())
sample_provinces = ['전국']  # 간단하게 전국만 표시
sido_btns_html = ''.join(f'<button class="sido-btn" data-sido="{k}">{k}</button>' for k in sample_provinces)

print("📊 차트 데이터 준비 완료")

# ---------------------------
# 7) HTML/JS 매크로: 레이어 선택 + 차트 패널
# ---------------------------

# 왼쪽 metric 버튼 패널
layer_template = f"""
{{% macro html(this, kwargs) %}}
<style>
  #layer-panel {{
      position:absolute; top:100px; left:10px; z-index:9999;
      background:#fff; padding:10px 16px; border-radius:14px;
      box-shadow:0 4px 20px rgba(0,0,0,.15);
      display:flex; gap:8px; font-family:'Segoe UI','NanumGothic',sans-serif;
  }}
  .layer-btn {{
      border:none; border-radius:16px; padding:8px 18px;
      font-size:13px; background:#f0f0f1; cursor:pointer;
      transition:all .2s ease;
      color:#444;
  }}
  .layer-btn:hover {{ filter:brightness(1.05); }}
</style>
<div id="layer-panel">
  {layer_btns_html}
</div>
{{% endmacro %}}

{{% macro script(this, kwargs) %}}
const layerDict = {layer_dict_js};
const mapObj = {{% raw %}}{m.get_name()}{{% endraw %}};

if (!window.metricStyles) {{
    window.metricStyles = {metric_styles_js};
}}

window.currentMetric = "사회취약지수";
window.currentProvince = "전국";
window.currentLayer = layerDict["사회취약지수"];

function showLayer(key) {{
    const newLayer = layerDict[key];
    if (window.currentLayer === newLayer) return;
    Object.values(layerDict).forEach(id => {{
        const layer = window[id];
        if (mapObj.hasLayer(layer)) mapObj.removeLayer(layer);
    }});
    mapObj.addLayer(window[newLayer]);
    window.currentLayer = newLayer;
}}

document.getElementById('layer-panel').addEventListener('click', e => {{
    if (!e.target.classList.contains('layer-btn')) return;
    const layerKey = e.target.dataset.layer;

    document.querySelectorAll('.layer-btn').forEach(b => {{
        b.style.background = '#f0f0f1';
        b.style.color = '#444';
    }});
    e.target.style.background = window.metricStyles[layerKey].color;
    e.target.style.color = '#fff';

    window.currentMetric = layerKey;
    showLayer(layerKey);
    if (typeof window.updateChart === 'function') {{
        window.updateChart(window.currentMetric, window.currentProvince || '전국');
    }}

    const activeSido = document.querySelector('.sido-btn.active');
    if (activeSido) {{
        activeSido.style.background = window.metricStyles[layerKey].color;
        activeSido.style.color = '#fff';
    }}
}});
{{% endmacro %}}
"""

# 오른쪽 차트 + 시도 선택 패널
chart_template = f"""
{{% macro html(this, kwargs) %}}
<style>
  #vuln-panel {{
      position:absolute; top:170px; right:10px; z-index:9999;
      width:440px; background:#fff; padding:16px;
      border-radius:14px; box-shadow:0 6px 26px rgba(0,0,0,.18);
      font-family:'Segoe UI','NanumGothic',sans-serif;
  }}
  #sido-buttons {{
      display:flex; flex-wrap:wrap; gap:8px; justify-content:center;
      margin-top:12px;
  }}
  .sido-btn {{
      padding:8px 18px; font-size:13px; border:none; border-radius:18px;
      background:#f6f6f7; color:#444; cursor:pointer;
      box-shadow:0 1px 3px rgba(0,0,0,.08);
      transition:all .2s ease;
  }}
  .sido-btn:hover {{ filter:brightness(1.05); }}
</style>
<div id="vuln-panel">
  <canvas id="barChart" width="400" height="260"></canvas>
  <div id="sido-buttons">{sido_btns_html}</div>
</div>
{{% endmacro %}}

{{% macro script(this, kwargs) %}}
const provinceData = {province_js};

if (!window.metricStyles) {{
    window.metricStyles = {metric_styles_js};
}}

window.currentMetric = window.currentMetric || "사회취약지수";
window.currentProvince = window.currentProvince || "전국";

const ctx = document.getElementById('barChart').getContext('2d');
const initData = (provinceData[window.currentMetric] && provinceData[window.currentMetric][window.currentProvince])
    ? provinceData[window.currentMetric][window.currentProvince]
    : provinceData[window.currentMetric]['전국'];
const initStyle = window.metricStyles[window.currentMetric] || {{suffix:'', color:'#888'}};

const chart = new Chart(ctx, {{
    type: 'bar',
    data: {{
        labels: initData.labels,
        datasets: [{{ data: initData.values, backgroundColor: initStyle.color }}]
    }},
    options: {{
        indexAxis: 'y',
        scales: {{ x: {{ beginAtZero: true }} }},
        plugins: {{
            legend: {{ display: false }},
            tooltip: {{
                callbacks: {{
                    label: c => {{
                        const suffix = (window.metricStyles[window.currentMetric] || {{suffix:''}}).suffix;
                        return c.parsed.x + suffix;
                    }}
                }}
            }}
        }}
    }}
}});

window.updateChart = function(metric, province) {{
    window.currentMetric = metric;
    if (province) window.currentProvince = province;

    const pdata = (provinceData[metric] && provinceData[metric][window.currentProvince])
        ? provinceData[metric][window.currentProvince]
        : provinceData[metric]['전국'];
    const style = window.metricStyles[metric] || {{suffix:'', color:'#888'}};

    chart.data.labels = pdata.labels;
    chart.data.datasets[0].data = pdata.values;
    chart.data.datasets[0].backgroundColor = style.color;
    chart.update();

    document.querySelectorAll('.sido-btn').forEach(b => {{
        if (b.classList.contains('active')) {{
            b.style.background = style.color;
            b.style.color = '#fff';
        }} else {{
            b.style.background = '#f6f6f7';
            b.style.color = '#444';
        }}
    }});
}};

document.getElementById('sido-buttons').addEventListener('click', e => {{
    if (!e.target.classList.contains('sido-btn')) return;
    const key = e.target.dataset.sido;

    document.querySelectorAll('.sido-btn').forEach(b => {{
        b.classList.remove('active');
        b.style.background = '#f6f6f7';
        b.style.color = '#444';
    }});
    e.target.classList.add('active');

    const currStyle = window.metricStyles[window.currentMetric] || {{color:'#888'}};
    e.target.style.background = currStyle.color;
    e.target.style.color = '#fff';

    window.currentProvince = key;
    window.updateChart(window.currentMetric, window.currentProvince);
}});
{{% endmacro %}}
"""

print("🎨 UI 템플릿 준비 완료")

# ---------------------------
# 8) 매크로를 Folium 지도에 붙이기
# ---------------------------
layer_panel = MacroElement()
layer_panel._template = Template(layer_template)
m.get_root().add_child(layer_panel)

chart_panel = MacroElement()
chart_panel._template = Template(chart_template)
m.get_root().add_child(chart_panel)

print("✅ UI 패널 추가 완료")

# ---------------------------
# 9) 레이어 컨트롤 및 HTML 저장
# ---------------------------
folium.LayerControl(collapsed=True).add_to(m)

# 결과 저장
output_path = '../results/integrated_housing_sewer_social_map.html'
os.makedirs(os.path.dirname(output_path), exist_ok=True)
m.save(output_path)

print(f"✅ 지도 저장 완료: {output_path}")
print(f"📊 통합 데이터 요약:")
print(f"  • 총 행정동: {len(geo_all['features'])}개")
print(f"  • 주거취약지수: 시도별 데이터 ({len(housing_data)}개)")
print(f"  • 수도인프라지수: 읍면동별 데이터 ({len(sewer_data_unique)}개)")
print(f"  • 사회취약지수: 읍면동별 데이터 ({len(social_data_unique)}개)") 
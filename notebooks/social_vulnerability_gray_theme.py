import json
import os
import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.font_manager as fm
import folium
import random
from folium.features import GeoJsonTooltip
from branca.element import Template, MacroElement, Element

# ---------------------------
# 0) 글로벌 설정: 한글 폰트 & 음수 기호
# ---------------------------
for f in ['Malgun Gothic', 'AppleGothic', 'NanumGothic']:
    if any(ft.name == f for ft in fm.fontManager.ttflist):
        mpl.rcParams['font.family'] = f
        break
mpl.rcParams['axes.unicode_minus'] = False  # 음수 깨짐 방지

# ---------------------------
# 1) GeoJSON 로드 및 결합 (전국 단위)
# ---------------------------
paths = {
    '세종': '../data/raw/hangjeongdong_세종특별자치시.geojson',
    '경북': '../data/raw/hangjeongdong_경상북도.geojson',
    '강원': '../data/raw/hangjeongdong_강원도.geojson',
    '경기': '../data/raw/hangjeongdong_경기도.geojson',
    '경남': '../data/raw/hangjeongdong_경상남도.geojson',
    '광주': '../data/raw/hangjeongdong_광주광역시.geojson',
    '대전': '../data/raw/hangjeongdong_대전광역시.geojson',
    '대구': '../data/raw/hangjeongdong_대구광역시.geojson',
    '서울': '../data/raw/hangjeongdong_서울특별시.geojson',
    '부산': '../data/raw/hangjeongdong_부산광역시.geojson',
    '인천': '../data/raw/hangjeongdong_인천광역시.geojson',
    '울산': '../data/raw/hangjeongdong_울산광역시.geojson',
    '제주': '../data/raw/hangjeongdong_제주특별자치도.geojson',
    '전북': '../data/raw/hangjeongdong_전라북도.geojson',
    '전남': '../data/raw/hangjeongdong_전라남도.geojson',
    '충남': '../data/raw/hangjeongdong_충청남도.geojson',
    '충북': '../data/raw/hangjeongdong_충청북도.geojson',
}
geos = [json.load(open(p, encoding='utf-8')) for p in paths.values()]
geo_all = {
    "type": "FeatureCollection",
    "features": [f for g in geos for f in g['features']]
}

# ---------------------------
# 2) 데이터 로드 및 전처리
# ---------------------------

# 사회취약지수 데이터 로드
social_data = pd.read_csv('../data/processed/202506_읍면동_사회취약계층표.csv')

# 취약등급 계산: 사회취약지수 기준 구간별 1~4 등급
bins = [0, 25, 50, 75, 100]
def grade(x):
    if x is None or (isinstance(x, float) and np.isnan(x)):
        return 1
    for i in range(1, len(bins)):
        if x < bins[i]:
            return i
    return len(bins) - 1

social_data['취약등급'] = social_data['사회취약지수'].apply(grade)

# 행정동명 매핑 (GeoJSON에서)
code2name = {
    str(f['properties']['adm_cd2']): f['properties']['adm_nm']
    for f in geo_all['features']
}
social_data['행정동명'] = social_data['행정동코드'].astype(str).map(code2name)

# 시도명 추출 (행정동명 기준)
def sido_of(name):
    if not isinstance(name, str):
        return '기타'
    for k in paths.keys():
        if name.startswith(k):
            return k
    return '기타'

social_data['시도명'] = social_data['행정동명'].apply(sido_of)

# ---------------------------
# 3) GeoJSON feature에 social_data 속성 병합
# ---------------------------
data_dict = social_data.set_index('행정동코드').to_dict(orient='index')

# 여기서 empty에 취약등급과 취약지수를 미리 넣는 이유는, 고령자 수나 아동 수 통계청 조사에서
# 특정 시군구나, 읍면동이 누락되어 있으므로 임의의 값을 넣었습니다.
empty = {
    '총인구': 0,
    '고령자인구수': 0,
    '사회취약지수': 12,
    '취약등급': 1,
}

for feat in geo_all['features']:
    c = str(feat['properties'].get('adm_cd2', ''))
    row = data_dict.get(c)
    if row:
        feat['properties'].update({
            '총인구': row.get('총인구', 0),
            '고령자인구수': row.get('고령자인구수', 0),
            '사회취약지수': row.get('사회취약지수', np.nan),
            '취약등급': row.get('취약등급', 1),
        })
    else:
        empty['사회취약지수'] = round(random.uniform(5, 20),5)
        feat['properties'].update(empty)

# ---------------------------
# 4) 지표 설정 (회색 테마로 변경)
# ---------------------------
METRICS = {
    "사회취약지수": dict(
        col="사회취약지수",
        palette="Greys",
        bins=[0, 25, 50, 75, 100],
        fmt="{:.0f}%",
        chart_color="#636363"  # 진한 회색
    ),
}

# ---------------------------
# 5) Folium 지도 생성 및 Choropleth 레이어 추가
# ---------------------------
m = folium.Map(location=[36, 127], zoom_start=7,
               tiles='cartodbpositron', control_scale=True)

# 색상 맵 생성 (회색 계열)
def get_color_map(palette, bins):
    if palette == "Greys":
        return ['#f7f7f7', '#cccccc', '#969696', '#636363', '#252525']
    else:
        return ['#f7f7f7', '#cccccc', '#969696', '#636363', '#252525']

layer_js_refs = {}
for i, (title, cfg) in enumerate(METRICS.items(), start=1):
    # 각 metric별 Choropleth 생성
    ch = folium.Choropleth(
        geo_data=geo_all,
        data=social_data,
        columns=('행정동코드', cfg['col']),
        key_on='feature.properties.adm_cd2',
        fill_color=cfg['palette'],
        bins=cfg['bins'],
        fill_opacity=0.85,
        line_opacity=0.3,
        line_weight=0.4,
        nan_fill_color='#f7f7f7',  # 회색으로 변경
        name=title,
        show=(i == 1),
    ).add_to(m)

    # 마우스 오버 툴팁: 행정동, metric 값, 취약등급
    GeoJsonTooltip(
        fields=['adm_nm', cfg['col'], '취약등급'],
        aliases=['행정동', title, '취약등급'],
        localize=True,
        labels=True,
        sticky=False,
        style=(
            "background-color:rgba(255,255,255,.9);"
            "border:1px solid #999;border-radius:3px;"
            "box-shadow:2px 2px 6px rgba(0,0,0,.15);"
            "font-size:12px;padding:4px;"
        )
    ).add_to(ch.geojson)

    layer_js_refs[title] = ch.get_name()

# ---------------------------
# 6) 차트 및 버튼용 데이터 준비
# ---------------------------
# Chart.js 로딩 (중복 방지)
if not any("chart.js" in s.render().lower() for s in m.get_root().header._children.values()):
    m.get_root().header.add_child(
        Element('<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>')
    )

# metric × 시도(전국 포함) top10 구조 생성
province_data = {}
for metric_name, cfg in METRICS.items():
    col = cfg["col"]
    per_metric = {}
    nat_top = social_data.nlargest(10, col)
    per_metric['전국'] = {
        'labels': nat_top['행정동명'].tolist(),
        'values': nat_top[col].tolist()
    }
    for sido, grp in social_data.groupby('시도명'):
        top10 = grp.nlargest(10, col)
        per_metric[sido] = {
            'labels': top10['행정동명'].tolist(),
            'values': top10[col].tolist()
        }
    province_data[metric_name] = per_metric

# metric 스타일: 접미사, 색
metric_styles = {}
for k, v in METRICS.items():
    suffix = v['fmt'].replace("{:.0f}", "")
    metric_styles[k] = {
        'suffix': suffix,
        'color': v.get('chart_color', '#636363')  # 회색으로 변경
    }

# JS 직렬화
province_js = json.dumps(province_data, ensure_ascii=False)
metric_styles_js = json.dumps(metric_styles, ensure_ascii=False)
layer_dict_js = json.dumps(layer_js_refs, ensure_ascii=False)

# 버튼 HTML 구성
layer_btns_html = ''.join(f'<button class="layer-btn" data-layer="{k}">{k}</button>' for k in METRICS.keys())
sample_provinces = list(next(iter(province_data.values())).keys())
sido_btns_html = ''.join(f'<button class="sido-btn" data-sido="{k}">{k}</button>' for k in sample_provinces if k != '기타')

# ---------------------------
# 7) HTML/JS 매크로: 레이어 선택 + 차트 패널 (색 동기화 포함)
# ---------------------------

# 왼쪽 metric 버튼 패널 (active 색은 해당 metric 색)
layer_template = f"""
{{% macro html(this, kwargs) %}}
<style>
  #layer-panel {{
      position:absolute; top:100px; left:10px; z-index:9999;
      background:#fff; padding:10px 16px; border-radius:14px;
      box-shadow:0 4px 20px rgba(0,0,0,.15);
      display:flex; gap:8px; font-family:'Segoe UI','NanumGothic',sans-serif;
  }}
  .layer-btn {{
      border:none; border-radius:16px; padding:8px 18px;
      font-size:13px; background:#f0f0f1; cursor:pointer;
      transition:all .2s ease;
      color:#444;
  }}
  .layer-btn:hover {{ filter:brightness(1.05); }}
</style>
<div id="layer-panel">
  {layer_btns_html}
</div>
{{% endmacro %}}

{{% macro script(this, kwargs) %}}
const layerDict = {layer_dict_js};
const mapObj = {{% raw %}}{m.get_name()}{{% endraw %}};

// metricStyles가 아직 없으면 초기화 (공유 객체)
if (!window.metricStyles) {{
    window.metricStyles = {metric_styles_js};
}}

window.currentMetric = "사회취약지수";
window.currentProvince = "전국";
window.currentLayer = layerDict["사회취약지수"];

// 지도 레이어 전환 함수
function showLayer(key) {{
    const newLayer = layerDict[key];
    if (window.currentLayer === newLayer) return;
    Object.values(layerDict).forEach(id => {{
        const layer = window[id];
        if (mapObj.hasLayer(layer)) mapObj.removeLayer(layer);
    }});
    mapObj.addLayer(window[newLayer]);
    window.currentLayer = newLayer;
}}

// metric 버튼 클릭 처리: 레이어/차트/스타일 동기화
document.getElementById('layer-panel').addEventListener('click', e => {{
    if (!e.target.classList.contains('layer-btn')) return;
    const layerKey = e.target.dataset.layer;

    // metric 버튼 reset
    document.querySelectorAll('.layer-btn').forEach(b => {{
        b.style.background = '#f0f0f1';
        b.style.color = '#444';
    }});
    // 클릭된 것만 active (색 반영)
    e.target.style.background = window.metricStyles[layerKey].color;
    e.target.style.color = '#fff';

    // 현재 metric 갱신
    window.currentMetric = layerKey;
    showLayer(layerKey);
    if (typeof window.updateChart === 'function') {{
        window.updateChart(window.currentMetric, window.currentProvince || '전국');
    }}

    // 오른쪽 시도(active) 버튼도 현재 metric 색으로 맞춤
    const activeSido = document.querySelector('.sido-btn.active');
    if (activeSido) {{
        activeSido.style.background = window.metricStyles[layerKey].color;
        activeSido.style.color = '#fff';
    }}
}});
{{% endmacro %}}
"""

# 오른쪽 차트 + 시도 선택 패널 (metric/시도 동기화, active 색 반영)
chart_template = f"""
{{% macro html(this, kwargs) %}}
<style>
  #vuln-panel {{
      position:absolute; top:170px; right:10px; z-index:9999;
      width:440px; background:#fff; padding:16px;
      border-radius:14px; box-shadow:0 6px 26px rgba(0,0,0,.18);
      font-family:'Segoe UI','NanumGothic',sans-serif;
  }}
  #sido-buttons {{
      display:flex; flex-wrap:wrap; gap:8px; justify-content:center;
      margin-top:12px;
  }}
  .sido-btn {{
      padding:8px 18px; font-size:13px; border:none; border-radius:18px;
      background:#f6f6f7; color:#444; cursor:pointer;
      box-shadow:0 1px 3px rgba(0,0,0,.08);
      transition:all .2s ease;
  }}
  .sido-btn:hover {{ filter:brightness(1.05); }}
</style>
<div id="vuln-panel">
  <canvas id="barChart" width="400" height="260"></canvas>
  <div id="sido-buttons">{sido_btns_html}</div>
</div>
{{% endmacro %}}

{{% macro script(this, kwargs) %}}
const provinceData = {province_js};

// metricStyles가 이미 없으면 초기화 (한 번만)
if (!window.metricStyles) {{
    window.metricStyles = {metric_styles_js};
}}

window.currentMetric = window.currentMetric || "사회취약지수";
window.currentProvince = window.currentProvince || "전국";

// 초기 차트 데이터와 스타일
const ctx = document.getElementById('barChart').getContext('2d');
const initData = (provinceData[window.currentMetric] && provinceData[window.currentMetric][window.currentProvince])
    ? provinceData[window.currentMetric][window.currentProvince]
    : provinceData[window.currentMetric]['전국'];
const initStyle = window.metricStyles[window.currentMetric] || {{suffix:'', color:'#636363'}};

// Chart.js 객체 생성
const chart = new Chart(ctx, {{
    type: 'bar',
    data: {{
        labels: initData.labels,
        datasets: [{{ data: initData.values, backgroundColor: initStyle.color }}]
    }},
    options: {{
        indexAxis: 'y',
        scales: {{ x: {{ beginAtZero: true }} }},
        plugins: {{
            legend: {{ display: false }},
            tooltip: {{
                callbacks: {{
                    label: c => {{
                        const suffix = (window.metricStyles[window.currentMetric] || {{suffix:''}}).suffix;
                        return c.parsed.x + suffix;
                    }}
                }}
            }}
        }}
    }}
}});

// metric/시도 바뀔 때 차트 및 버튼 스타일 업데이트
window.updateChart = function(metric, province) {{
    window.currentMetric = metric;
    if (province) window.currentProvince = province;

    const pdata = (provinceData[metric] && provinceData[metric][window.currentProvince])
        ? provinceData[metric][window.currentProvince]
        : provinceData[metric]['전국'];
    const style = window.metricStyles[metric] || {{suffix:'', color:'#636363'}};

    chart.data.labels = pdata.labels;
    chart.data.datasets[0].data = pdata.values;
    chart.data.datasets[0].backgroundColor = style.color;
    chart.update();

    // 시도(active) 버튼 스타일 반영
    document.querySelectorAll('.sido-btn').forEach(b => {{
        if (b.classList.contains('active')) {{
            b.style.background = style.color;
            b.style.color = '#fff';
        }} else {{
            b.style.background = '#f6f6f7';
            b.style.color = '#444';
        }}
    }});
}};

// 시도 버튼 클릭: active 토글 + 차트 갱신
document.getElementById('sido-buttons').addEventListener('click', e => {{
    if (!e.target.classList.contains('sido-btn')) return;
    const key = e.target.dataset.sido;

    document.querySelectorAll('.sido-btn').forEach(b => {{
        b.classList.remove('active');
        b.style.background = '#f6f6f7';
        b.style.color = '#444';
    }});
    e.target.classList.add('active');

    const currStyle = window.metricStyles[window.currentMetric] || {{color:'#636363'}};
    e.target.style.background = currStyle.color;
    e.target.style.color = '#fff';

    window.currentProvince = key;
    window.updateChart(window.currentMetric, window.currentProvince);
}});
{{% endmacro %}}
"""

# ---------------------------
# 8) 매크로를 Folium 지도에 붙이기
# ---------------------------
layer_panel = MacroElement()
layer_panel._template = Template(layer_template)
m.get_root().add_child(layer_panel)

chart_panel = MacroElement()
chart_panel._template = Template(chart_template)
m.get_root().add_child(chart_panel)

# ---------------------------
# 9) 레이어 컨트롤 및 HTML 저장
# ---------------------------
folium.LayerControl(collapsed=True).add_to(m)
output_path = '../results/social_vulnerability_gray_theme.html'
os.makedirs(os.path.dirname(output_path), exist_ok=True)
m.save(output_path)
print(f"✔️ 회색 테마 지도 저장 완료: {output_path}") 